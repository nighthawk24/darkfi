searchState.loadedDescShard("drk", 0, "CLI-util structure\nAtomic pointer to a <code>Drk</code> structure.\nCreate an alias record for provided Token ID.\nFetch all pukeys from the wallet.\nCreate and append a <code>Money::Fee</code> call to a given <code>Transaction</code>.\nAuxiliary function to apply <code>DaoFunction::Exec</code> call data to …\nAuxiliary function to apply <code>DaoFunction::Mint</code> call data to …\nAuxiliary function to apply <code>DaoFunction::Propose</code> call data …\nAuxiliary function to apply <code>DaoFunction::Vote</code> call data to …\nAppend data related to DAO contract transactions into the …\nAppend data related to Money contract transactions into the\nCreate and attach the fee call to given transaction.\nBroadcast a given transaction to darkfid and forward onto …\nBlockchain cache database operations handler\nBlockchain cache database operations handler\nCLI utility functions\nConfirm already imported DAO metadata into the wallet. …\nCustom implementation of rusqlite::named_params! to use …\nWallet functionality related to Dao\nFetch known unspent balances from the wallet for the given …\nExecute a DAO generic proposal.\nExecute a DAO transfer proposal.\nCreate a DAO generic proposal transaction.\nList DAO(s) imported in the wallet. If a name is given, …\nMint a DAO on-chain.\nCreate a DAO generic proposal.\nCreate a DAO transfer proposal.\nCreate a DAO transfer proposal transaction.\nVote on a DAO proposal\nAuxiliary function to execute a request towards the …\nFetch default pubkey from the wallet.\nFetch default secret key from the wallet.\nWallet functionality related to Deployooor\nGenerate a new deploy authority keypair and place it into …\nCreate a feeless contract deployment transaction.\nAuxiliary function to derive <code>TokenAttributes</code> for provided …\nError codes\nCreate a token freeze transaction. Returns the transaction …\nReturns the argument unchanged.\nFlag indicating if fun stuff are enabled\nFetch all aliases from the wallet. Optionally filter using …\nFetch all aliases from the wallet, mapped by token id.\nQueries darkfid for currently configured block target time.\nFetch all coins and their metadata related to the Money …\nFetch provided contract specified token unspend balances …\nFetch a DAO given its bulla.\nFetch a DAO given its name.\nFetch a DAO proposal by its bulla.\nFetch all known DAO proposals from the wallet given a DAO …\nFetch DAO Merkle trees from the wallet. If a tree doesn’…\nFetch all known DAOs from the wallet.\nRetrieve a deploy authority keypair given an index\nGet the last scanned block height and hash from the wallet.\nFetch all token mint authorities from the wallet.\nFetch all secret keys from the wallet.\nFetch the Money Merkle tree from the cache. If it doesn’…\nQueries darkfid for current best fork next height.\nFetch all known DAO proposalss from the wallet.\nGet a scanned block information record.\nFetch all scanned block information records.\nRetrieve token by provided string. Input string represents …\nFetch provided token unspend balances from the wallet.\nFetch provided token unfrozen mint authority from the …\nQueries darkfid for a tx with given hash.\nQueries darkfid for given transaction’s required fee.\nGet a transaction history record.\nFetch all transactions history records, excluding bytes …\nAuxiliary function to handle coins with their notes from a …\nAuxiliary function to handle freezes from a transaction …\nAuxiliary function to handle own coins from a transaction …\nImport given DAO params into the wallet with a given name.\nImport a token mint authority into the wallet.\nImport given secret keys into the wallet. If the key …\nInitialize the first half of an atomic swap\nInitialize wallet with tables for the DAO contract.\nInitialize wallet with tables for the Deployooor contract.\nInitialize wallet with tables for the Money contract.\nInitialize wallet with tables for <code>Drk</code>.\nInspect and verify a given swap (half or full) transaction\nDrk interactive shell\nCalls <code>U::from(self)</code>.\nCreate a full transaction by inspecting and verifying …\nList contract deploy authorities from the wallet\nCreate a feeless contract redeployment lock transaction.\nTry to fetch zkas bincodes for the given <code>ContractId</code>.\nMarks all coins in the wallet as spent, if their nullifier …\nMark provided transaction input coins as spent.\nCreate a token mint transaction. Returns the transaction …\nWallet functionality related to Money\nFetch known unspent balances from the wallet and return …\nAuxiliary function to  grab all the nullifiers from a …\nGenerate a new keypair and place it into the wallet.\nAuxiliary function to parse a <code>MONEY_COINS_TABLE</code> record. …\nAuxiliary function to parse a proposal record row.\nAuxiliary function to parse a <code>DAO_DAOS_TABLE</code> record.\nAuxiliary function to parse a <code>MONEY_TOKENS_TABLE</code> records. …\nAuxiliary function to grab all the nullifiers, coins with …\nAuxiliary function to ping configured darkfid daemon for …\nImport given DAO proposal into the wallet.\nImport given DAO vote into the wallet.\nInsert or update a <code>Transaction</code> history record into the …\nInsert or update a slice of <code>Transaction</code> history records …\nRemove provided alias record from the wallet database.\nRemove the DAO votes in the wallet that were created after …\nRemove the Money coins in the wallet that were created …\nRemove the transaction history records in the wallet that …\nAuxiliary function to completely reset wallet state.\nReset all DAO proposals in the wallet.\nReset the DAO Merkle trees in the cache.\nReset all DAO votes in the wallet.\nReset confirmed DAOs in the wallet.\nReset all token deploy authorities frozen status in the …\nReset all token mint authorities frozen status in the …\nReset the Money coins in the wallet.\nReset the Money nullifiers Sparse Merkle Tree in the cache.\nReset the Money Merkle tree in the cache.\nReset the scanned blocks information records in the cache.\nReset state to provided block height. If genesis block …\nReset the transaction history records in the wallet.\nSet reverted status to the transaction history records in …\ndarkfid JSON-RPC related methods\nJSON-RPC client to execute requests to darkfid daemon\n<code>scan_block</code> will go over over transactions in a block and …\nScans the blockchain for wallet relevant transactions, …\nAuxiliary function to generate a new <code>ScanCache</code> for the …\nWallet functionality related to scanned blocks\nSet provided index address as default in the wallet.\nSign given swap transaction by retrieving the secret key …\nSimulate the transaction with the state machine.\nInserts given slice to the wallets nullifiers Sparse …\nAuxiliary function to stop current JSON-RPC client, if its …\nSwap methods\nToken methods\nPayment methods\nCreate a payment transaction. Returns the transaction …\nWallet functionality related to transactions history\nReset DAO proposals in the wallet that were minted after …\nReset confirmed DAOs in the wallet that were minted after …\nReset execution information in the wallet for DAO proposals\nRemove deploy authorities frozen status in the wallet that …\nRemove token mint authorities frozen status in the wallet …\nMark a given coin in the wallet as unspent.\nMark the Money coins in the wallet that were spent after …\nUpdate given DAO params into the wallet, if the …\nWallet database operations handler\nWallet database operations handler\nStructure holding all sled trees that define the …\nOverlay structure over a <code>Cache</code> instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch given block height number from the store’s state …\nExecute an atomic sled batch corresponding to inserts to …\nInsert a <code>u32</code> and a block hash into overlay’s scanned …\nInsert a <code>u32</code> and a block inverse diff into store’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>sled</code> tree storing the merkle trees of the blockchain, …\nThe <code>sled</code> tree storing the Sparse Merkle Tree of the Money …\nInstantiate a new <code>CacheOverlay</code> over the given <code>Cache</code> …\nInstantiate a new <code>Cache</code> with the given <code>sled</code> database.\nThe <code>sled</code> tree storing the scanned blocks from the …\nMain pointer to the sled db connection\nThe <code>sled</code> tree storing each blocks’ full database state …\nA map from leaf indices to leaf data stored as field …\nAuxiliary function to print or insert provided messages to …\nAuxiliary function to generate provided shell completions.\nFun police go away\nAuxiliary function to parse provided string into a tokens …\nAuxiliary function to parse a base64 encoded transaction …\nAuxiliary function to parse a base64 encoded transaction …\nAuxiliary function to parse provided string into a values …\nAuxiliary function to print provided string buffer.\nParameters representing a DAO to be initialized\nStructure representing a <code>DAO_DAOS_TABLE</code> record.\nStructure representing a <code>DAO_PROPOSALS_TABLE</code> record.\nStructure representing a <code>DAO_VOTES_TABLE</code> record.\nBlinding facfor of all votes\nValue of all votes\nBlock height of the transaction this vote was casted\nThe call index in the transaction where the DAO was …\nThe call index in the transaction where the proposal was …\nCall index in the transaction where this vote was casted\nThe on chain representation of the DAO\nPlaintext proposal call data the members share between them\nDAO strongly supported proposals executor secret key\nBlock height of the transaction this proposal was executed\nDAO proposals executor secret key\nThe transaction hash where the proposal was executed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse provided toml string into <code>DaoParams</code>. If a specific …\nNumeric identifier for the vote\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeaf position of the DAO in the Merkle tree of DAOs\nLeaf position of the proposal in the Merkle tree of …\nBlock height of the transaction this DAO was deployed\nBlock height of the transaction this proposal was deployed\nMoney merkle tree snapshot for reproducing the snapshot …\nName identifier for the DAO\nGenerate new <code>DaoParams</code>. If a specific secret key is …\nDAO notes decryption secret key\nVote input nullifiers\nMoney nullifiers SMT snapshot for reproducing the snapshot …\nDAO parameters\nThe on chain representation of the proposal\nBulla identifier of the proposal this vote is for\nDAO proposals viewer secret key\nDAO proposals creator secret key\nGenerate a toml string containing the DAO configuration.\nThe transaction hash where the DAO was deployed\nThe transaction hash where the proposal was deployed\nTransaction hash where this vote was casted\nThe vote\nDAO votes viewer secret key\nBlinding factor for the yes vote\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nCustom wallet database errors available for drk. Please …\nResult type used in the wallet database module\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAuxiliary function to define the interactive shell …\nAuxiliary function to define the alias command handling.\nAuxiliary function to define the alias add subcommand …\nAuxiliary function to define the alias remove subcommand …\nAuxiliary function to define the alias show subcommand …\nAuxiliary function to define the attach fee command …\nAuxiliary function to define the broadcast command …\nAuxiliary function to define the completions command …\nAuxiliary function to define the contract command handling.\nAuxiliary function to define the contract deploy …\nAuxiliary function to define the contract generate deploy …\nAuxiliary function to define the contract list subcommand …\nAuxiliary function to define the contract lock subcommand …\nAuxiliary function to define the dao command handling.\nAuxiliary function to define the dao balance subcommand …\nAuxiliary function to define the dao create subcommand …\nAuxiliary function to define the dao exec subcommand …\nAuxiliary function to define the dao import subcommand …\nAuxiliary function to define the dao list subcommand …\nAuxiliary function to define the dao mint subcommand …\nAuxiliary function to define the dao proposal subcommand …\nAuxiliary function to define the dao proposal import …\nAuxiliary function to define the dao proposals subcommand …\nAuxiliary function to define the dao propose generic …\nAuxiliary function to define the dao propose transfer …\nAuxiliary function to define the dao spent hook subcommand …\nAuxiliary function to define the dao update keys …\nAuxiliary function to define the dao view subcommand …\nAuxiliary function to define the dao vote subcommand …\nAuxiliary function to define the explorer command handling.\nAuxiliary function to define the explorer clear reverted …\nAuxiliary function to define the explorer fetch …\nAuxiliary function to define the explorer scanned blocks …\nAuxiliary function to define the explorer simulate …\nAuxiliary function to define the explorer transactions …\nAuxiliary function to define the inspect command handling.\nAuxiliary function to define the otc command handling.\nAuxiliary function to define the otc init subcommand …\nAuxiliary function to define the otc inspect subcommand …\nAuxiliary function to define the otc join subcommand …\nAuxiliary function to define the otc sign subcommand …\nAuxiliary function to define the ping command handling.\nAuxiliary function to define the scan command handling.\nAuxiliary function to define the spend command handling.\nAuxiliary function to define the subscribe command …\nAuxiliary function to define the token command handling.\nAuxiliary function to define the token freeze subcommand …\nAuxiliary function to define the token generate mint …\nAuxiliary function to define the token import subcommand …\nAuxiliary function to define the token list subcommand …\nAuxiliary function to define the token mint subcommand …\nAuxiliary function to define the transfer command handling.\nAuxiliary function to define the unspend command handling.\nAuxiliary function to define the unsubscribe command …\nAuxiliary function to define the wallet command handling.\nAuxiliary function to define the wallet address subcommand …\nAuxiliary function to define the wallet addresses …\nAuxiliary function to define the wallet balance subcommand …\nAuxiliary function to define the wallet coins subcommand …\nAuxiliary function to define the wallet default address …\nAuxiliary function to define the wallet import secrets …\nAuxiliary function to define the wallet initialize …\nAuxiliary function to define the wallet keygen subcommand …\nAuxiliary function to define the wallet secrets subcommand …\nAuxiliary function to define the wallet tree subcommand …\nAuxiliary function to print the help message.\nAuxiliary function to define the interactive shell hints.\nAuxiliary function to start provided Drk as an interactive …\nAuxiliary function to listen for linenoise input line and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuxiliary structure holding various in memory caches to …\nThe DAO Merkle tree containing DAO bullas\nThe DAO Merkle tree containing proposals bullas\nAuxiliary function to consume the messages buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAuxiliary function to append messages to the buffer.\nMessages buffer for better downstream prints handling\nThe Money Sparse Merkle tree containing coins nullifiers\nThe Money Merkle tree containing coins\nAll our known secrets to decrypt coin notes\nOur own DAOs with their proposals and votes keys\nOur own DAOs proposals with their corresponding DAO …\nOur own tokens to track freezes\nOur own coins nullifiers and their leaf positions\nSubscribes to darkfid’s JSON-RPC notification endpoint …\nHalf of the swap data, includes the coin that is supposed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStructure representing base wallet database operations.\nConnection to the SQLite database.\nGenerate a new statement for provided query and bind the …\nThis function executes a given SQL query that contains …\nThis function executes a given SQL query, but isn’t able …\nReturns the argument unchanged.\nGenerate a <code>SELECT</code> query for provided table from selected …\nCalls <code>U::from(self)</code>.\nCreate a new wallet database handler. If <code>path</code> is <code>None</code>, …\nQuery provided table using provided query for multiple …\nQuery provided table from selected column names and …\nQuery provided table from selected column names and …")