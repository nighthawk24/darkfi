searchState.loadedDescShard("darkfid", 0, "Structure representing a DarkFi node\nAtomic pointer to the DarkFi node\nStructure representing a DarkFi daemon\nAtomic pointer to the DarkFi daemon\nConsensus protocol background task\n<code>dnet</code> background task\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize a DarkFi daemon.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuxiliary function to execute a request towards the …\nAuxiliary function to execute a request towards the …\nHTTP JSON-RPC connection tracker\nHTTP JSON-RPC background task\nDarkfi node instance\nP2P network protocols handler.\nPing configured miner daemon JSON-RPC endpoint.\nP2P net protocols\nJSON-RPC requests handler and methods\nJSON-RPC client to execute requests to the miner daemon\nJSON-RPC connection tracker\nJSON-RPC background task\nStart the DarkFi daemon in the given executor, using the …\nStop the DarkFi daemon.\nA map of various subscribers exporting live info from the …\nValidator async tasks\nGarbage collection task transactions batch size\nValidator(node) pointer\nCustom RPC errors available for darkfid. Please sort them …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDarkfid P2P protocols handler.\nAtomic pointer to the Darkfid P2P protocols handler.\nReturns the argument unchanged.\nInitialize a Darkfid P2P protocols handler.\nCalls <code>U::from(self)</code>.\nP2P network pointer\n<code>ProtocolProposal</code> messages handler\nBlock proposal broadcast protocol\nValidator blockchain sync protocol\nTransaction broadcast protocol\nStart the Darkfid P2P protocols handler for provided …\nStop the Darkfid P2P protocols handler.\n<code>ProtocolSync</code> messages handler\n<code>ProtocolTx</code> messages handler\nAuxiliary <code>Proposal</code> wrapper structure used for messaging.\nHandler managing <code>Proposal</code> messages, over a generic P2P …\nAtomic pointer to the <code>ProtocolProposal</code> handler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBackground handler function for ProtocolProposal.\nInitialize a generic prototocol handler for <code>Proposal</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe generic handler for <code>Proposal</code> messages.\nStart the <code>ProtocolProposal</code> background task.\nStop the <code>ProtocolProposal</code> background tasks.\nUnknown proposals queue to be checked for reorg.\nHandler background task to process unknown proposals queue.\nStructure represening a request to ask a node a fork …\nStructure representing the response to …\nStructure represening a request to ask a node for up to …\nStructure representing the response to <code>ForkHeadersRequest</code>, …\nStructure represening a request to ask a node for up to …\nStructure representing the response to <code>ForkProposalsRequest</code>…\nStructure represening a request to ask a node a fork …\nStructure representing the response to <code>ForkSyncRequest</code>, …\nStructure represening a request to ask a node for up to …\nStructure representing the response to <code>HeaderSyncRequest</code>, …\nHandler managing all <code>ProtocolSync</code> messages, over generic …\nAtomic pointer to the <code>ProtocolSync</code> handler.\nStructure represening a request to ask a node for up to…\nStructure representing the response to <code>SyncRequest</code>, …\nStructure represening a request to ask a node for their …\nStructure representing the response to <code>TipRequest</code>, …\nResponse blocks\nBlock header hash to identify the fork\nResponse fork block header hash\nBlock header hash to identify the fork\nBlock header hash to identify the fork\nThe generic handler for <code>ForkHeaderHashRequest</code> messages.\nThe generic handler for <code>ForkHeadersRequest</code> messages.\nThe generic handler for <code>ForkProposalsRequest</code> messages.\nThe generic handler for <code>ForkSyncRequest</code> messages.\nOptional fork tip block hash\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBackground handler function for ProtocolSyncForkHeaderHash.\nBackground handler function for ProtocolSyncForkHeaders.\nBackground handler function for ProtocolSyncForkProposals.\nBackground handler function for ProtocolSyncFork.\nBackground handler function for ProtocolSyncHeader.\nBackground handler function for ProtocolSync.\nBackground handler function for ProtocolSyncTip.\nCanonical(confirmed) tip block hash\nThe generic handler for <code>HeaderSyncRequest</code> messages.\nResponse headers\nHeader hashes\nHeader hashes\nResponse headers\nHeader hashes\nCanonical(confirmed) tip block height\nHeader height\nHeader height\nInitialize the generic prototocol handlers for all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResponse fork proposals\nResponse proposals\nStart all <code>ProtocolSync</code> background tasks.\nStop all <code>ProtocolSync</code> background tasks.\nThe generic handler for <code>SyncRequest</code> messages.\nFlag indicating the node is synced\nCanonical(confirmed) tip block hash\nCanonical(confirmed) tip block hash\nThe generic handler for <code>TipRequest</code> messages.\nHandler managing <code>Transaction</code> messages, over a generic P2P …\nAtomic pointer to the <code>ProtocolTx</code> handler.\nReturns the argument unchanged.\nBackground handler function for ProtocolTx.\nThe generic handler for <code>Transaction</code> messages.\nInitialize a generic prototocol handler for <code>Transaction</code> …\nCalls <code>U::from(self)</code>.\nStart the <code>ProtocolTx</code> background task.\nStop the <code>ProtocolTx</code> background task.\nDefault JSON-RPC <code>RequestHandler</code> type\nStructure to hold a JSON-RPC client and its config, so we …\nHTTP JSON-RPC <code>RequestHandler</code> type for p2pool\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStop the client.\nAuxiliary structure representing node consensus init task …\nSync the node consensus state and start the corresponding …\nAsync task used for listening for new blocks and perform …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAsync task to monitor network disconnections.\nAsync task to start the consensus task, while monitoring …\nAsync task used for purging erroneous pending transactions …\nAuxiliary structure representing node miner rewards …\nReturns the argument unchanged.\nAuxiliary function to generate next block in an atomic …\nAuxiliary function to generate a Money::PoWReward …\nCalls <code>U::from(self)</code>.\nAsync task to listen for incoming proposals and check if …\nAsync task to generate and mine provided fork index next …\nAsync task to generate and mine provided fork index next …\nAsync task used for participating in the PoW block …\nAsync task to wait for listener’s stop signal.\nAuxiliary function to ask all peers for their current tip …\nAuxiliary function to retrieve blocks of provided headers …\nAuxiliary function to retrieve headers backwards until our …\nAuxiliary function to retrieve best fork state from a …\nasync task used for block syncing. A checkpoint can be …\nAuxiliary function to block until node is connected to at …\nAuxiliary function to handle a potential reorg. We first …\nBackground task to handle an unknown proposal. Returns a …\nBackground task to handle unknown proposals.")