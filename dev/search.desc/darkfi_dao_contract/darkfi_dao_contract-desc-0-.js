searchState.loadedDescShard("darkfi_dao_contract", 0, "Smart contract implementing Anonymous DAOs on DarkFi.\nzkas dao auth money_transfer encrypted coin circuit …\nzkas dao auth money_transfer circuit namespace\nzkas dao early exec circuit namespace\nzkas dao exec circuit namespace\nzkas dao mint circuit namespace\nzkas dao propose input circuit namespace\nzkas dao propose main circuit namespace\nzkas dao vote input circuit namespace\nzkas dao vote main circuit namespace\nFunctions available in the contract\nNot allowed to make proposals using snapshots with block …\nBlockwindow from block height and target time. Used for …\nClient API for interaction with this smart contract\nInternal contract errors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCall parameters definitions\nProvides core structs for DAO::propose()\nProvides core structs for DAO::vote()\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDAOs are represented on chain as a commitment to this …\nParameters for <code>Dao::AuthMoneyTransfer</code>\nRepresents a single or multiple blinded votes. These can …\nA <code>DaoBulla</code> represented in the state\nParameters for <code>Dao::Exec</code>\nState update for <code>Dao::Exec</code>\nParameters for <code>Dao::Mint</code>\nState update for <code>Dao::Mint</code>\nA <code>DaoProposalBulla</code> represented in the state\nMetadata for a DAO proposal on the blockchain\nParameters for <code>Dao::Propose</code>\nInput for a DAO proposal\nState update for <code>Dao::Propose</code>\nParameters for <code>Dao::Vote</code>\nInput for a DAO proposal vote\nState update for <code>Dao::Vote</code>\nAggregate a vote with existing one\nAll value staked in the vote\nThe ratio of winning/total votes needed for a proposal to …\nAggregated blinds for the vote commitments\nDAO bulla blind\nThe DAO bulla\nRevealed DAO bulla\nMerkle root of the DAO in the DAO state\nThe DAO signature(notes) public key\nFlag indicating if its early execution\nDAO strongly supported proposals executor public key\nMinimal threshold of participating total tokens needed for …\nDAO proposals executor public key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>DaoBulla</code> object from given bytes, erroring if the …\nCreate a <code>DaoBulla</code> object from given bytes, erroring if the …\nDAO’s governance token ID\nReference the raw inner base field element\nReference the raw inner base field element\nInputs for the proposal\nInputs for the vote\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerkle root for the input’s coin inclusion proof\nEncrypted note\nEncrypted note\nDAO notes decryption public key\nThe proposal auth calls\nBulla of the DAO proposal\nMinted proposal bulla\nProposal bulla being voted on\nThe proposal bulla being voted on\nThe proposal bulla\nThe proposal bulla\nThe updated proposal metadata\nDAO proposals viewer public key\nThe minimum amount of governance tokens needed to open a …\nDAO proposals creator public key\nMinimal threshold of participating total tokens needed for …\nPublic key used for signing\nPublic key used for signing\nPublic key for the signature. The signature ensures this …\nSMT root for the input’s nullifier exclusion proof\nSnapshotted Merkle root in the Money state\nSnapshotted Merkle root in the Money state\nSnapshotted SMT root in the Money state\nSnapshotted SMT root in the Money state\nConvert the <code>DaoBulla</code> type into 32 raw bytes\nConvert the <code>DaoBulla</code> type into 32 raw bytes\nToken ID commitment for the proposal\nToken commitment for the vote inputs\nArbitrary data provided by the user. We don’t use this.\nValue commitment for the input\nVote aggregate\nVote commitment\nVote nullifier\nVote nullifiers,\nDAO votes viewer public key\nCommitment for yes votes\nWeighted vote commit")